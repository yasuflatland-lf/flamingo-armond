package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	repository "backend/graph/db"
	"backend/graph/model"
	"context"
	"fmt"
	"strings"
	"time"
)

// CreateCard is the resolver for the createCard field.
func (r *mutationResolver) CreateCard(ctx context.Context, input model.NewCard) (*model.Card, error) {
	return r.Srv.CreateCard(ctx, input)
}

// UpdateCard is the resolver for the updateCard field.
func (r *mutationResolver) UpdateCard(ctx context.Context, id int64, input model.NewCard) (*model.Card, error) {
	return r.Srv.UpdateCard(ctx, id, input)
}

// DeleteCard is the resolver for the deleteCard field.
func (r *mutationResolver) DeleteCard(ctx context.Context, id int64) (bool, error) {
	return r.Srv.DeleteCard(ctx, id)
}

// CreateCardGroup is the resolver for the createCardGroup field.
func (r *mutationResolver) CreateCardGroup(ctx context.Context, input model.NewCardGroup) (*model.CardGroup, error) {
	gormCardGroup := convertToGormCardGroup(input)
	result := r.DB.Create(&gormCardGroup)
	if result.Error != nil {
		return nil, result.Error
	}
	return &model.CardGroup{
		ID:      gormCardGroup.ID,
		Name:    gormCardGroup.Name,
		Created: gormCardGroup.Created,
		Updated: gormCardGroup.Updated,
	}, nil
}

// UpdateCardGroup is the resolver for the updateCardGroup field.
func (r *mutationResolver) UpdateCardGroup(ctx context.Context, id int64, input model.NewCardGroup) (*model.CardGroup, error) {
	var cardGroup repository.Cardgroup
	if err := r.DB.First(&cardGroup, id).Error; err != nil {
		return nil, err
	}
	cardGroup.Name = input.Name
	cardGroup.Updated = time.Now()
	if err := r.DB.Save(&cardGroup).Error; err != nil {
		return nil, err
	}
	return &model.CardGroup{
		ID:      cardGroup.ID,
		Name:    cardGroup.Name,
		Created: cardGroup.Created,
		Updated: cardGroup.Updated,
	}, nil
}

// DeleteCardGroup is the resolver for the deleteCardGroup field.
func (r *mutationResolver) DeleteCardGroup(ctx context.Context, id int64) (bool, error) {
	result := r.DB.Delete(&repository.Cardgroup{}, id)
	if result.Error != nil {
		return false, result.Error
	}
	if result.RowsAffected == 0 {
		return false, fmt.Errorf("record not found")
	}
	return true, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	gormUser := convertToGormUser(input)
	result := r.DB.Create(&gormUser)
	if result.Error != nil {
		if strings.Contains(result.Error.Error(), "unique constraint") {
			return nil, fmt.Errorf("user already exists")
		}
		return nil, result.Error
	}
	return &model.User{
		ID:      gormUser.ID,
		Name:    gormUser.Name,
		Created: gormUser.Created,
		Updated: gormUser.Updated,
	}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int64, input model.NewUser) (*model.User, error) {
	var user repository.User
	if err := r.DB.First(&user, id).Error; err != nil {
		return nil, err
	}
	user.Name = input.Name
	user.Updated = time.Now()
	if err := r.DB.Save(&user).Error; err != nil {
		return nil, err
	}
	return &model.User{
		ID:      user.ID,
		Name:    user.Name,
		Created: user.Created,
		Updated: user.Updated,
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int64) (bool, error) {
	if err := r.DB.Delete(&repository.User{}, id).Error; err != nil {
		return false, err
	}
	return true, nil
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.NewRole) (*model.Role, error) {
	gormRole := convertToGormRole(input)
	result := r.DB.Create(&gormRole)
	if result.Error != nil {
		return nil, result.Error
	}
	return &model.Role{
		ID:   gormRole.ID,
		Name: gormRole.Name,
	}, nil
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id int64, input model.NewRole) (*model.Role, error) {
	var role repository.Role
	if err := r.DB.First(&role, id).Error; err != nil {
		return nil, err
	}
	role.Name = input.Name
	if err := r.DB.Save(&role).Error; err != nil {
		return nil, err
	}
	return &model.Role{
		ID:   role.ID,
		Name: role.Name,
	}, nil
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id int64) (bool, error) {
	if err := r.DB.Delete(&repository.Role{}, id).Error; err != nil {
		return false, err
	}
	return true, nil
}

// AddUserToCardGroup is the resolver for the addUserToCardGroup field.
func (r *mutationResolver) AddUserToCardGroup(ctx context.Context, userID int64, cardGroupID int64) (*model.CardGroup, error) {
	var user repository.User
	var cardGroup repository.Cardgroup
	if err := r.DB.First(&user, userID).Error; err != nil {
		return nil, err
	}
	if err := r.DB.First(&cardGroup, cardGroupID).Error; err != nil {
		return nil, err
	}
	if err := r.DB.Model(&cardGroup).Association("Users").Append(&user); err != nil {
		return nil, err
	}
	return &model.CardGroup{
		ID:      cardGroup.ID,
		Name:    cardGroup.Name,
		Created: cardGroup.Created,
		Updated: cardGroup.Updated,
	}, nil
}

// RemoveUserFromCardGroup is the resolver for the removeUserFromCardGroup field.
func (r *mutationResolver) RemoveUserFromCardGroup(ctx context.Context, userID int64, cardGroupID int64) (*model.CardGroup, error) {
	var user repository.User
	var cardGroup repository.Cardgroup
	if err := r.DB.First(&user, userID).Error; err != nil {
		return nil, err
	}
	if err := r.DB.First(&cardGroup, cardGroupID).Error; err != nil {
		return nil, err
	}
	if err := r.DB.Model(&cardGroup).Association("Users").Delete(&user); err != nil {
		return nil, err
	}
	return &model.CardGroup{
		ID:      cardGroup.ID,
		Name:    cardGroup.Name,
		Created: cardGroup.Created,
		Updated: cardGroup.Updated,
	}, nil
}

// AssignRoleToUser is the resolver for the assignRoleToUser field.
func (r *mutationResolver) AssignRoleToUser(ctx context.Context, userID int64, roleID int64) (*model.User, error) {
	var user repository.User
	var role repository.Role
	if err := r.DB.First(&user, userID).Error; err != nil {
		return nil, err
	}
	if err := r.DB.First(&role, roleID).Error; err != nil {
		return nil, err
	}
	if err := r.DB.Model(&user).Association("Roles").Append(&role); err != nil {
		return nil, err
	}
	return &model.User{
		ID:      user.ID,
		Name:    user.Name,
		Created: user.Created,
		Updated: user.Updated,
	}, nil
}

// RemoveRoleFromUser is the resolver for the removeRoleFromUser field.
func (r *mutationResolver) RemoveRoleFromUser(ctx context.Context, userID int64, roleID int64) (*model.User, error) {
	var user repository.User
	var role repository.Role
	if err := r.DB.First(&user, userID).Error; err != nil {
		return nil, err
	}
	if err := r.DB.First(&role, roleID).Error; err != nil {
		return nil, err
	}
	if err := r.DB.Model(&user).Association("Roles").Delete(&role); err != nil {
		return nil, err
	}
	return &model.User{
		ID:      user.ID,
		Name:    user.Name,
		Created: user.Created,
		Updated: user.Updated,
	}, nil
}

// Cards is the resolver for the cards field.
func (r *queryResolver) Cards(ctx context.Context) ([]*model.Card, error) {
	return r.Srv.Cards(ctx)
}

// Card is the resolver for the card field.
func (r *queryResolver) Card(ctx context.Context, id int64) (*model.Card, error) {
	return r.Srv.GetCardByID(ctx, id)
}

// CardGroups is the resolver for the cardGroups field.
func (r *queryResolver) CardGroups(ctx context.Context) ([]*model.CardGroup, error) {
	var cardGroups []repository.Cardgroup
	if err := r.DB.Find(&cardGroups).Error; err != nil {
		return nil, err
	}
	var gqlCardGroups []*model.CardGroup
	for _, cardGroup := range cardGroups {
		gqlCardGroups = append(gqlCardGroups, &model.CardGroup{
			ID:      cardGroup.ID,
			Name:    cardGroup.Name,
			Created: cardGroup.Created,
			Updated: cardGroup.Updated,
		})
	}
	return gqlCardGroups, nil
}

// CardGroup is the resolver for the cardGroup field.
func (r *queryResolver) CardGroup(ctx context.Context, id int64) (*model.CardGroup, error) {
	var cardGroup repository.Cardgroup
	if err := r.DB.First(&cardGroup, id).Error; err != nil {
		return nil, err
	}
	return &model.CardGroup{
		ID:      cardGroup.ID,
		Name:    cardGroup.Name,
		Created: cardGroup.Created,
		Updated: cardGroup.Updated,
	}, nil
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context) ([]*model.Role, error) {
	var roles []repository.Role
	if err := r.DB.WithContext(ctx).Find(&roles).Error; err != nil {
		return nil, err
	}
	var gqlRoles []*model.Role
	for _, role := range roles {
		gqlRoles = append(gqlRoles, &model.Role{
			ID:      role.ID,
			Name:    role.Name,
			Created: role.Created,
			Updated: role.Updated,
		})
	}
	return gqlRoles, nil
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id int64) (*model.Role, error) {
	var role repository.Role
	if err := r.DB.First(&role, id).Error; err != nil {
		return nil, err
	}
	return &model.Role{
		ID:   role.ID,
		Name: role.Name,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []repository.User
	if err := r.DB.Find(&users).Error; err != nil {
		return nil, err
	}
	var gqlUsers []*model.User
	for _, user := range users {
		gqlUsers = append(gqlUsers, &model.User{
			ID:      user.ID,
			Name:    user.Name,
			Created: user.Created,
			Updated: user.Updated,
		})
	}
	return gqlUsers, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int64) (*model.User, error) {
	var user repository.User
	if err := r.DB.First(&user, id).Error; err != nil {
		return nil, err
	}
	return &model.User{
		ID:      user.ID,
		Name:    user.Name,
		Created: user.Created,
		Updated: user.Updated,
	}, nil
}

// CardsByCardGroup is the resolver for the cardsByCardGroup field.
func (r *queryResolver) CardsByCardGroup(ctx context.Context, cardGroupID int64) ([]*model.Card, error) {
	return r.Srv.CardsByCardGroup(ctx, cardGroupID)
}

// UserRole is the resolver for the userRole field.
func (r *queryResolver) UserRole(ctx context.Context, userID int64) (*model.Role, error) {
	var user repository.User
	if err := r.DB.Preload("Roles").First(&user, userID).Error; err != nil {
		return nil, err
	}
	if len(user.Roles) == 0 {
		return nil, fmt.Errorf("user has no role")
	}
	role := user.Roles[0] // Assuming a user has only one role
	return &model.Role{
		ID:   role.ID,
		Name: role.Name,
	}, nil
}

// CardGroupsByUser is the resolver for the cardGroupsByUser field.
func (r *queryResolver) CardGroupsByUser(ctx context.Context, userID int64) ([]*model.CardGroup, error) {
	var user repository.User
	if err := r.DB.Preload("CardGroups").First(&user, userID).Error; err != nil {
		return nil, err
	}
	var gqlCardGroups []*model.CardGroup
	for _, group := range user.CardGroups {
		gqlCardGroups = append(gqlCardGroups, &model.CardGroup{
			ID:      group.ID,
			Name:    group.Name,
			Created: group.Created,
			Updated: group.Updated,
		})
	}
	return gqlCardGroups, nil
}

// UsersByRole is the resolver for the usersByRole field.
func (r *queryResolver) UsersByRole(ctx context.Context, roleID int64) ([]*model.User, error) {
	var role repository.Role
	if err := r.DB.Preload("Users").First(&role, roleID).Error; err != nil {
		return nil, err
	}
	var gqlUsers []*model.User
	for _, user := range role.Users {
		gqlUsers = append(gqlUsers, &model.User{
			ID:      user.ID,
			Name:    user.Name,
			Created: user.Created,
			Updated: user.Updated,
		})
	}
	return gqlUsers, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func convertToGormCard(input model.NewCard) repository.Card {
	return repository.Card{
		Front:      input.Front,
		Back:       input.Back,
		ReviewDate: input.ReviewDate,
		IntervalDays: func() int {
			if input.IntervalDays != nil {
				return *input.IntervalDays
			}
			return 1
		}(),
		CardGroupID: input.CardgroupID,
		Created:     time.Now(),
		Updated:     time.Now(),
	}
}
func convertToGormCardGroup(input model.NewCardGroup) repository.Cardgroup {
	return repository.Cardgroup{
		Name:    input.Name,
		Created: time.Now(),
		Updated: time.Now(),
	}
}
func convertToGormUser(input model.NewUser) repository.User {
	return repository.User{
		Name:    input.Name,
		Created: time.Now(),
		Updated: time.Now(),
	}
}
func convertToGormRole(input model.NewRole) repository.Role {
	return repository.Role{
		Name: input.Name,
	}
}
